#!/usr/bin/env python3.10
"""
Script de inicializaci√≥n para QuinielasApp en PythonAnywhere
Ejecutar una sola vez despu√©s de subir los archivos
"""

import os
import sys
import sqlite3
import hashlib
from datetime import datetime

def print_step(step, message):
    """Imprimir paso con formato"""
    print(f"\n{'='*50}")
    print(f"PASO {step}: {message}")
    print(f"{'='*50}")

def create_database():
    """Crear todas las tablas de la base de datos"""
    print_step(1, "CREANDO BASE DE DATOS Y TABLAS")
    
    # Conectar a la base de datos (se crea si no existe)
    conn = sqlite3.connect('quiniela.db')
    cursor = conn.cursor()
    
    # Crear tabla users
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            is_admin INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    print("‚úÖ Tabla 'users' creada")
    
    # Crear tabla picks
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS picks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            game_id TEXT,
            team_picked TEXT,
            week INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    print("‚úÖ Tabla 'picks' creada")
    
    # Crear tabla game_results
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS game_results (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            game_id TEXT UNIQUE,
            week INTEGER,
            home_team TEXT,
            away_team TEXT,
            home_score INTEGER,
            away_score INTEGER,
            winner TEXT,
            processed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    print("‚úÖ Tabla 'game_results' creada")
    
    # Crear tabla system_config
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS system_config (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            config_key TEXT UNIQUE NOT NULL,
            config_value TEXT NOT NULL,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    print("‚úÖ Tabla 'system_config' creada")
    
    conn.commit()
    conn.close()
    print("‚úÖ Base de datos inicializada correctamente")

def create_admin_user():
    """Crear usuario administrador"""
    print_step(2, "CREANDO USUARIO ADMINISTRADOR")
    
    conn = sqlite3.connect('quiniela.db')
    cursor = conn.cursor()
    
    # Verificar si ya existe admin
    cursor.execute('SELECT id FROM users WHERE username = ?', ('admin',))
    if cursor.fetchone():
        print("‚ö†Ô∏è  Usuario admin ya existe, saltando creaci√≥n")
    else:
        # Crear hash de contrase√±a
        password = 'QuinielasNFL2024!'
        password_hash = hashlib.md5(password.encode()).hexdigest()
        
        # Insertar admin
        cursor.execute('''
            INSERT INTO users (username, password, is_admin)
            VALUES (?, ?, ?)
        ''', ('admin', password_hash, 1))
        
        print("‚úÖ Usuario administrador creado")
        print(f"   Usuario: admin")
        print(f"   Contrase√±a: {password}")
    
    conn.commit()
    conn.close()

def init_system_config():
    """Inicializar configuraci√≥n del sistema"""
    print_step(3, "CONFIGURANDO SISTEMA")
    
    conn = sqlite3.connect('quiniela.db')
    cursor = conn.cursor()
    
    configs = [
        ('current_week', '4'),
        ('picks_locked', '0'),
        ('season_year', '2024')
    ]
    
    for key, value in configs:
        cursor.execute('''
            INSERT OR REPLACE INTO system_config (config_key, config_value, updated_at)
            VALUES (?, ?, ?)
        ''', (key, value, datetime.now()))
        print(f"‚úÖ Configuraci√≥n '{key}' = '{value}'")
    
    conn.commit()
    conn.close()

def verify_installation():
    """Verificar que todo est√© instalado correctamente"""
    print_step(4, "VERIFICANDO INSTALACI√ìN")
    
    # Verificar archivos
    required_files = ['app.py', 'wsgi.py', 'templates/']
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file} existe")
        else:
            print(f"‚ùå {file} NO ENCONTRADO")
            return False
    
    # Verificar base de datos
    if os.path.exists('quiniela.db'):
        print("‚úÖ Base de datos creada")
    else:
        print("‚ùå Base de datos NO creada")
        return False
    
    # Verificar tablas
    conn = sqlite3.connect('quiniela.db')
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
    tables = [row[0] for row in cursor.fetchall()]
    
    required_tables = ['users', 'picks', 'game_results', 'system_config']
    for table in required_tables:
        if table in tables:
            print(f"‚úÖ Tabla '{table}' existe")
        else:
            print(f"‚ùå Tabla '{table}' NO existe")
            return False
    
    # Verificar usuario admin
    cursor.execute('SELECT username, is_admin FROM users WHERE username = ?', ('admin',))
    admin = cursor.fetchone()
    if admin and admin[1] == 1:
        print("‚úÖ Usuario administrador configurado")
    else:
        print("‚ùå Usuario administrador NO configurado")
        return False
    
    conn.close()
    return True

def test_import():
    """Probar que la aplicaci√≥n se puede importar"""
    print_step(5, "PROBANDO IMPORTACI√ìN DE LA APP")
    
    try:
        # Agregar directorio actual al path
        current_dir = os.path.dirname(os.path.abspath(__file__))
        if current_dir not in sys.path:
            sys.path.insert(0, current_dir)
        
        # Intentar importar la app
        from app import app
        print("‚úÖ Aplicaci√≥n Flask importada correctamente")
        return True
    except Exception as e:
        print(f"‚ùå Error al importar la aplicaci√≥n: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üèà INICIALIZADOR DE QUINIELAS APP")
    print("=" * 50)
    
    try:
        # Cambiar al directorio del script
        script_dir = os.path.dirname(os.path.abspath(__file__))
        os.chdir(script_dir)
        print(f"üìÅ Directorio de trabajo: {script_dir}")
        
        # Ejecutar pasos de inicializaci√≥n
        create_database()
        create_admin_user()
        init_system_config()
        
        # Verificar instalaci√≥n
        if verify_installation():
            print_step("‚úÖ", "VERIFICACI√ìN EXITOSA")
        else:
            print_step("‚ùå", "VERIFICACI√ìN FALL√ì")
            return False
        
        # Probar importaci√≥n
        if test_import():
            print_step("üéâ", "INICIALIZACI√ìN COMPLETA")
            print("\nüöÄ PR√ìXIMOS PASOS:")
            print("1. Ve a tu dashboard de PythonAnywhere")
            print("2. En la pesta√±a 'Web', click 'Reload banano111.pythonanywhere.com'")
            print("3. Accede a: https://banano111.pythonanywhere.com")
            print("4. Login con: admin / QuinielasNFL2024!")
            print("\n‚ú® ¬°Tu aplicaci√≥n est√° lista!")
            return True
        else:
            return False
            
    except Exception as e:
        print(f"\n‚ùå ERROR CR√çTICO: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)